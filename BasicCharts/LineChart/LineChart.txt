<table class='ui-widget ui-widget-content' style='width:100%'></table>
<div class='elx-datahtml-script'>
	var parent = $("#"+viewId);
    var data = parent.data("data");
  var processedDataNationWide =[];
   var processedDataDRM =[];
   var processedDataFLC =[];
   var processedDataHybridDRM =[];
   var processedDataHybridFLC =[];
  var temp =[];
  var chartOptions ={};
  var finalArr =[];
  var dataArr =[];
  var sumData =[];
  var categoriesArr =[];
  
  if(data != null){
  data.forEach( function (d){
   var year =  new Date(d["v_marriage_solemnisation_count.marriage_date"]);

  processedDataNationWide.push({
  "NationWide": d["v_marriage_solemnisation_count.capris_count"],
   "Year": year.getFullYear()
 });
  
    processedDataDRM.push({
  "DRM": d["v_marriage_solemnisation_count.drm_count"],
  "Year":  year.getFullYear()
 });
  
    processedDataFLC.push({
  "FLC": d["v_marriage_solemnisation_count.flc_count"],
  "Year":  year.getFullYear()
 });
  
    processedDataHybridDRM.push({
   "HybridDRM": d["v_marriage_solemnisation_count.hybriddrm_count"],
   "Year":  year.getFullYear()
 });
  
    processedDataHybridFLC.push({
   "HybridFLC": d["v_marriage_solemnisation_count.hybridflc_count"],
  "Year":  year.getFullYear()
 });
});
 

  var current_date = new Date();
 var  year_value = current_date.getFullYear();
  for(var i = 0; i < 10; i ++)
  {
    categoriesArr.push( year_value - i );
  }
   
   categoriesArr.reverse();
  
   var nestdataNationWide = d3.nest()
  .key(function(d) { return d.Year;})
  .rollup(function(d) { 
   return d3.sum(d, function(g) {return g.NationWide; });
  })
  .entries(processedDataNationWide);
  
  temp=[];
  nestdataNationWide.forEach(function(d){
  dataArr=[];
  for( var c = 0 ; c < categoriesArr.length ; c++)
  {
  if(d.key == categoriesArr[c])
  { temp.push({key: categoriesArr[c], value : d.values});}}
});

     for( var c = 0 ; c < categoriesArr.length ; c++)
	 {  if (!containsObject(categoriesArr[c], temp)) {temp.push({key: categoriesArr[c], value : 0});}}
   temp.forEach(function(x) {dataArr.push(x.value);});
   finalArr.push({name:"NationWide",data:dataArr});

    var nestdataDRM = d3.nest()
  .key(function(d) { return d.Year;})
  .rollup(function(d) { 
   return d3.sum(d, function(g) {return g.DRM; });
  })
  .entries(processedDataDRM);
  
  temp=[];
  nestdataDRM.forEach(function(d){
  dataArr=[];
  for( var c = 0 ; c < categoriesArr.length ; c++)
  {
  if(d.key == categoriesArr[c])
  { temp.push({key: categoriesArr[c], value : d.values});}
  }

  });
  
       for( var c = 0 ; c < categoriesArr.length ; c++)
	 {  if (!containsObject(categoriesArr[c], temp)) {temp.push({key: categoriesArr[c], value : 0});}}
   temp.forEach(function(x) {dataArr.push(x.value);});
   finalArr.push({name:"DRM",data:dataArr});
   
   
   var nestdataFLC = d3.nest()
  .key(function(d) { return d.Year;})
  .rollup(function(d) { 
   return d3.sum(d, function(g) {return g.FLC; });
  })
  .entries(processedDataFLC);
  
  temp=[];
  nestdataFLC.forEach(function(d){
  dataArr=[];
  for( var c = 0 ; c < categoriesArr.length ; c++)
  {
  if(d.key == categoriesArr[c])
  { temp.push({key: categoriesArr[c], value : d.values});}
  }

  });
       for( var c = 0 ; c < categoriesArr.length ; c++)
	 {  if (!containsObject(categoriesArr[c], temp)) {temp.push({key: categoriesArr[c], value : 0});}}
   temp.forEach(function(x) {dataArr.push(x.value);});
   finalArr.push({name:"FLC",data:dataArr});
   
   var nestdataHybridDRM = d3.nest()
  .key(function(d) { return d.Year;})
  .rollup(function(d) { 
   return d3.sum(d, function(g) {return g.HybridDRM; });
  })
  .entries(processedDataHybridDRM);

  temp=[];
  nestdataHybridDRM.forEach(function(d){
  dataArr=[];
  for( var c = 0 ; c < categoriesArr.length ; c++)
  {
  if(d.key == categoriesArr[c])
  { temp.push({key: categoriesArr[c], value : d.values});}
  }

  });
       for( var c = 0 ; c < categoriesArr.length ; c++)
	 {  if (!containsObject(categoriesArr[c], temp)) {temp.push({key: categoriesArr[c], value : 0});}}
   temp.forEach(function(x) {dataArr.push(x.value);});
   finalArr.push({name:"Hybrid DRM",data:dataArr});
   
   var nestdataHybridFLC = d3.nest()
  .key(function(d) { return d.Year;})
  .rollup(function(d) { 
   return d3.sum(d, function(g) {return g.HybridFLC; });
  })
  .entries(processedDataHybridFLC);
  
  temp=[];
  nestdataHybridFLC.forEach(function(d){
  dataArr=[];
  for( var c = 0 ; c < categoriesArr.length ; c++)
  {
  if(d.key == categoriesArr[c])
  { temp.push({key: categoriesArr[c], value : d.values});}
  }

  });
       for( var c = 0 ; c < categoriesArr.length ; c++)
	 {  if (!containsObject(categoriesArr[c], temp)) {temp.push({key: categoriesArr[c], value : 0});}}
   temp.forEach(function(x) {dataArr.push(x.value);});
   finalArr.push({name:"Hybrid FLC",data:dataArr});
    

  
         function containsObject(key, list) {
                
            for (var i = 0; i < list.length; i++) {
               
                if (list[i].key == key) {
                    return true;
                }
            }

            return false;
        }

  
  
    var viewHolder = elx.host.getViewHolder(viewId);
  if(viewHolder){
  var v = new elx.LineHighchartView(view, finalArr,categoriesArr);
    viewHolder.setBaseView(v);
    viewHolder.resize();
  }
  }
</div>