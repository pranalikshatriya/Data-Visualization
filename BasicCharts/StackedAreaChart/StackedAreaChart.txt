<table class='ui-widget ui-widget-content' style='width:100%'></table>
<div class='elx-datahtml-script'>
	var parent = $("#"+viewId)
    var data = parent.data("data");
  var processedDataNationWide =[];
  var processedDataDRM =[];
  var processedDataFLC =[];
  var processedDataHybridDRM =[];
  var processedDataHybridFLC =[];
  var getMonthsArr=[];
  var tempArr=[];
  var finalArr =[];
  var dataArr =[];
  var getMonthsArrtemp=[];
  var initialMonth = 11;
  var monthNames = ["Jan", "Feb", "Mar", "Apr", "May", "Jun",
  "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
  if (data != null){
   data.forEach( function (d){
  var month = new Date(d["v_marriage_solemnisation_count.marriage_date"]);
  var year =  new Date(d["v_marriage_solemnisation_count.marriage_date"]);

  processedDataNationWide.push({
  "NationWide": d["v_marriage_solemnisation_count.capris_count"],
   "Date": monthNames[month.getMonth()]+"-"+year.getFullYear()
 });
  

    processedDataDRM.push({
  "DRM": d["v_marriage_solemnisation_count.drm_count"],
  "Date": monthNames[month.getMonth()]+"-"+year.getFullYear()
 });
  
    processedDataFLC.push({
  "FLC": d["v_marriage_solemnisation_count.flc_count"],
  "Date": monthNames[month.getMonth()]+"-"+year.getFullYear()
 });
  
    processedDataHybridDRM.push({
   "HybridDRM": d["v_marriage_solemnisation_count.hybriddrm_count"],
   "Date": monthNames[month.getMonth()]+"-"+year.getFullYear()
 });
  
    processedDataHybridFLC.push({
   "HybridFLC": d["v_marriage_solemnisation_count.hybridflc_count"],
  "Date": monthNames[month.getMonth()]+"-"+year.getFullYear()
 });
});
  
    
  var current_date = new Date();
 var  month_value = current_date.getMonth();
  while (month_value >=0) {
    getMonthsArr.push(monthNames[month_value]+"-"+current_date.getFullYear());
    month_value--;
}
  var length = getMonthsArr.length;
   while (length < 12) {
    tempArr.push(monthNames[initialMonth]+"-"+(current_date.getFullYear() - 1));
    initialMonth--;
    length++;
}
  

  getMonthsArr.push (tempArr);
  getMonthsArr = _.flatten(getMonthsArr)


     var nestdataNationWide = d3.nest()
   .key(function(d) { return d.Date;})
     .rollup(function(d) { 
   return d3.sum(d, function(g) {return g.NationWide; });
  })
   .entries(processedDataNationWide);
   
  
    var nestdataDRM = d3.nest()
   .key(function(d) { return d.Date;})
     .rollup(function(d) { 
   return d3.sum(d, function(g) {return g.DRM; });
  })
   .entries(processedDataDRM);
   
    var nestdataFLC = d3.nest()
   .key(function(d) { return d.Date;})
     .rollup(function(d) { 
   return d3.sum(d, function(g) {return g.FLC; });
  })
   .entries(processedDataFLC);
   
   	   var nestdataHybridDRM = d3.nest()
   .key(function(d) { return d.Date;})
     .rollup(function(d) { 
   return d3.sum(d, function(g) {return g.HybridDRM; });
  })
   .entries(processedDataHybridDRM);
   
    var nestdataHybridFLC = d3.nest()
   .key(function(d) { return d.Date;})
     .rollup(function(d) { 
   return d3.sum(d, function(g) {return g.HybridFLC; });
  })
   .entries(processedDataHybridFLC);
   getMonthsArr.reverse();
  
   
  var temp=[];
  
  nestdataNationWide.forEach(function(d){

  dataArr =[];
   for( var c = 0 ; c < getMonthsArr.length ; c++){

  if(d.key == getMonthsArr[c])
  {  temp.push({key: getMonthsArr[c], value : d.values});}}
   });
  
  
  for( var c = 0 ; c < getMonthsArr.length ; c++){
   if (!containsObject(getMonthsArr[c], temp)) {
          temp.push({key: getMonthsArr[c], value : 0});
        }
  }
  
  temp.forEach(function(x) { dataArr.push(x.value); });
  finalArr.push({name:"NationWide",data:dataArr});
  
	
  temp=[];	
  nestdataDRM.forEach(function(d){
  dataArr =[];
  for( var c = 0 ; c < getMonthsArr.length ; c++)
  { if(d.key == getMonthsArr[c])
  { temp.push({key: getMonthsArr[c], value : d.values});}
   } 
 
  });
   for( var c = 0 ; c < getMonthsArr.length ; c++){
   if (!containsObject(getMonthsArr[c], temp)) {
          temp.push({key: getMonthsArr[c], value : 0});
        }
  }
  
 
   temp.forEach(function(x) { dataArr.push(x.value); });
  finalArr.push({name:"DRM",data:dataArr});
  
  temp=[];
  nestdataFLC.forEach(function(d){
  dataArr =[];
  for( var c = 0 ; c < getMonthsArr.length ; c++)
  { if(d.key == getMonthsArr[c])
  { temp.push({key: getMonthsArr[c], value : d.values});}
 } 
  });
     for( var c = 0 ; c < getMonthsArr.length ; c++){
   if (!containsObject(getMonthsArr[c], temp)) {
          temp.push({key: getMonthsArr[c], value : 0});
        }
  }
  
 
   temp.forEach(function(x) { dataArr.push(x.value); });
  finalArr.push({name:"FLC",data:dataArr});
  
  temp=[];
  nestdataHybridDRM.forEach(function(d){
  dataArr =[];
  for( var c = 0 ; c < getMonthsArr.length ; c++)
  { if(d.key == getMonthsArr[c])
  { temp.push({key: getMonthsArr[c], value : d.values});}
 } 

  });
  
   for( var c = 0 ; c < getMonthsArr.length ; c++){
   if (!containsObject(getMonthsArr[c], temp)) {
          temp.push({key: getMonthsArr[c], value : 0});
        }
  }
  
 
   temp.forEach(function(x) { dataArr.push(x.value); });
  finalArr.push({name:"Hybrid DRM",data:dataArr});
  
  
  temp=[];
     nestdataHybridFLC.forEach(function(d){
  dataArr =[];
  for( var c = 0 ; c < getMonthsArr.length ; c++)
  { if(d.key == getMonthsArr[c])
  { temp.push({key: getMonthsArr[c], value : d.values});}
} 
 
  });
  
   for( var c = 0 ; c < getMonthsArr.length ; c++){
   if (!containsObject(getMonthsArr[c], temp)) {
          temp.push({key: getMonthsArr[c], value : 0});
        }
  }
  
 
   temp.forEach(function(x) { dataArr.push(x.value); });
  finalArr.push({name:"Hybrid FLC",data:dataArr});
  
          function containsObject(key, list) {
                
            for (var i = 0; i < list.length; i++) {
               
                if (list[i].key == key) {
                    return true;
                }
            }

            return false;
        }
  
  
    var viewHolder = elx.host.getViewHolder(viewId);
  if(viewHolder){
  var v = new elx.AreaHighchartView(view, finalArr,getMonthsArr);
    viewHolder.setBaseView(v);
    viewHolder.resize();
  }
  }
</div>