<div class='elx-datahtml-script'>
   	var parent = $("#"+viewId)
    var datareq = parent.data("data");
    var processedData =[];
    var rawdata =[];
    var seriesArr=[];
  var requiredcategoryArr=[];
  var categoryArr =[];
    var monthNames = ["January", "February", "March", "April", "May", "June","July", "August", "September", "October", "November", "December"];
  var view = elx.host.getViewById(viewId);
  if(datareq != null){
    datareq.forEach(function(d) {
  rawdata.push({
  
  "category": monthNames[parseInt(d["s_citizen_summary.month"])-1]+d["s_citizen_summary.year"],
  "cdd_code" : d["c_cdd_cs_div.cdd_code"],
  "cs_code" : d["c_cdd_cs_div.cs_code"],
  "div_code" : d["s_citizen_summary.div_code"],
  "PR": d["s_citizen_summary.pr_count"],
  "NewCitizen": d["s_citizen_summary.nc_count"]
  });
  });
  
   var bool =false;
  var boolnc =false;
  var currentdate = new Date();
  var currentmonth = currentdate.getMonth() ;
  var currentYear = currentdate.getFullYear();
  var startmonth = currentmonth;
  var startyear = currentYear;
  for(var i =0;i < 3 ; i++)
  {
   if(currentmonth >= 1)
  {
   requiredcategoryArr.push( _.where(rawdata, {"category":( monthNames[(parseInt(currentmonth))]+ String(currentYear))})); 
   currentmonth = currentmonth -1;
  }else{
  if(currentmonth == 0){
   requiredcategoryArr.push( _.where(rawdata, {"category":( monthNames[(parseInt(currentmonth))]+ String(currentYear))})); 
   currentmonth = 11; 
   currentYear = currentYear -1;
  
  }}}
 
  
  var endmonth = currentmonth;
  var  endyear = currentYear;
  
  var nestCategorydata = d3.nest()
  .key(function(d) { return d.category;})
  .entries(_.flatten(requiredcategoryArr));
   nestCategorydata.forEach(function(d){
   categoryArr.push(d.key);
   
  })

  
   var nestCDDPRdata = d3.nest()
  .key(function(d) { return d.cdd_code;})
  .key(function(d) { return d.category;})
   .rollup(function(d) { 
  return d3.sum(d, function(g) {return g.PR; });})
  .entries(_.flatten(requiredcategoryArr));
  
  
  
   var nestCDDNCdata = d3.nest()
  .key(function(d) { return d.cdd_code;})
  .key(function(d) { return d.category;})
   .rollup(function(d) { 
  return d3.sum(d, function(g) {return g.NewCitizen; });})
  .entries(_.flatten(requiredcategoryArr));
  
 
  
 var lookupcddcode = {};
 var cddCodeArr =[];
 var items = requiredcategoryArr;
  for (var item, i = 0; item = items[i++];) {
  var cddcode = item.cdd_code;
  
  
  if (!(cddcode in lookupcddcode)) {
    lookupcddcode[cddcode] = 1;
    cddCodeArr.push(cddcode);
    
  }
}
  categoryArr = categoryArr.reverse();
  nestCDDPRdata.forEach( function (d){
  for( var i=0;i < categoryArr.length; i++)
  {
  (d.values).forEach( function (c){
  if((c.key) == (categoryArr[i])){
  if ((bool == false))
  {
   data =[];
   data.push ({x: categoryArr.indexOf(categoryArr[i]), y: parseInt(c.values), year:(categoryArr[i]), scenario: String(d.key)});
   var obj = {id :("PR"+'-'+d.key),name:"PR", stack: d.key,color:'#003366', data: data };
   seriesArr.push(obj);
   bool = true;
  }
  else
  {
  data=[];
   data.push ({x: categoryArr.indexOf(categoryArr[i]), y: parseInt(c.values), year:(categoryArr[i]), scenario: String(d.key)});
  var obj = {id :("PR"+'-'+d.key),name:"PR", stack: d.key,color:'#003366', data: data, showInLegend: false };
   seriesArr.push(obj);
   bool = true;
  }}})}})
  
    nestCDDNCdata.forEach( function (d){
   for( var i=0;i < categoryArr.length ; i++)
  {
  (d.values).forEach( function (c){
  if(( c.key == (categoryArr[i]) )){
  if (boolnc == false)
  {
   data =[];
   data.push ({x: categoryArr.indexOf(categoryArr[i]), y: parseInt(c.values), year:(categoryArr[i]), scenario: String(d.key)});
   seriesArr.push({id :("New Citizen"+'-'+d.key),name:"New Citizen", stack: d.key,color:'#00fff9', data: data });
   boolnc = true;
  }
  else
  {
  data=[];
   data.push ({x: categoryArr.indexOf(categoryArr[i]), y: parseInt(c.values), year:(categoryArr[i]), scenario: String(d.key)});
   seriesArr.push({id :("New Citizen"+'-'+d.key),name:"New Citizen", stack: d.key,color:'#00fff9', data: data, showInLegend: false });
  }}})}})

    
  var title =  monthNames[(parseInt(endmonth +1))]+' '+endyear +'  To  '+  monthNames[(parseInt(startmonth))]+' '+startyear
   var viewHolder = elx.host.getViewHolder(viewId);
  if(viewHolder){
  var v = new elx.StackedColumnDrillView(view, seriesArr, categoryArr , requiredcategoryArr, title);
    viewHolder.setBaseView(v);
    viewHolder.resize();
  }
  }
</div>